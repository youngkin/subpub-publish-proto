[{publish_proto, [
  {amqp, [
    {reconnect_wait_millis, 2000},
    {consumer_prefetch_count, 10},
    {confirmed_publishing, false},
    %% RabbitMQ running in a local VM
    {broker_address, "192.168.56.31"}
    %% RabbitMQ running through Rabbit's "tracer" tool
%%     {broker_address, "localhost"}
    %% RabbitMQ running on stg-usw2c-pr-29-subpubpf-ramq-0003
%%      {broker_address, "10.199.23.211"}
  ]},
  
  %% Number of publisher worker processes
  {publishing_pool_size, 5},
  
  %% Delay message delivery acknowledgement back to RabbitMQ? 
  %% The value is in milliseconds. 0 means no delay in acking the message.
  %% This simulates an async delivery to a subscriber resulting in a delayed
  %% basic.ack to RabbitMQ.
  {delayed_ack, 50},
  
  %% Specifies whether or not to monitor the RabbitMQ connection and channel
  %% supporting publishers and subscribers
  {monitor_conn_chnl, true},
  
  %% Milliseconds to pause between publishing messages to RabbitMQ
  {inter_publish_pause_millis, 5},
  
  %% Milliseconds to wait for a message in a subscriber worker's mailbox before
  %% timing-out the receive loop and exiting. A value of 0 means an infinite timeout.
  {subscriber_timeout_millis, 0},
  
  %% Delay between samples which determines sample rate. E.g., 
  %% a delay of 1000 means a sample rate of 1/sec.
  {stats_collection_interval_millis, 5000},
  
  %% Defines both the number of subscribers and the header tags used to match a 
  %% Subscription to a published message (via the published message's header tags).
  {subscriber_headers, [
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Ignore.This">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Ignore.This.2">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Ignore.This.3">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Ignore.This.4">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}],
    
    [{<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
      {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
      {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
      {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}]
  ] },

  %% The header tags used by all the publishers, i.e., separate headers for different
  %% publishers isn't supported. This is contrary to how subscriber headers are handled.
  {publish_header, [
    {<<"MessageType">>, binary, <<"Some.Msg.Type">>}, {<<"SubSystem">>, binary, <<"Dragnet">>},
    {<<"System">>, binary, <<"Cronica">>}, {<<"ClientString">>, binary, <<"kaplan">>},
    {<<"Client">>, binary, <<"404310">>}, {<<"UserId">>, binary, <<"31674242">>},
    {<<"CourseId">>, binary, <<"11008988">>}, {<<"x-match">>, longstr, <<"all">>}] 
  }

]
},

  {lager, [
    {colored, false},
    {error_logger_hwm, 200}
%%     {handlers, [
%%       {lager_console_backend, info},
%%       {lager_file_backend, [{file, "log/errorTest.log"}, {level, error}]},
%%       {lager_file_backend, [{file, "log/debugTest.log"}, {level, debug}]},
%%       {lager_file_backend, [{file, "log/TestResults.log"}, {level, emergency}]},
%%       {lager_file_backend, [{file, "log/consoleTest.log"}, {level, info}]}
%%     ]}
  ]},


  {exometer, [
  { report,
    [
      { subscribers,
        [
          %%{  reporter_ID,             metric_ID as list,            DataPoint, sample rate, retry }
          {   exometer_report_statsd, [publish_proto, erlang, memory], total, 1000, true }
          , { exometer_report_statsd, [publish_proto, erlang, memory], processes, 1000, true }
          , { exometer_report_statsd, [publish_proto, erlang, memory], ets, 1000, true }
          , { exometer_report_statsd, [publish_proto, erlang, memory], binary, 1000, true }
          , { exometer_report_statsd, [publish_proto, erlang, memory], atom, 1000, true }
          , { exometer_report_statsd, [publish_proto, erlang, memory], system, 1000, true }

          , { exometer_report_statsd, [publish_proto, recon, alloc], used, 1000, true }
          , { exometer_report_statsd, [publish_proto, recon, alloc], allocated, 1000, true }
          , { exometer_report_statsd, [publish_proto, recon, alloc], unused, 1000, true }
          , { exometer_report_statsd, [publish_proto, recon, alloc], usage, 1000, true }

          , { exometer_report_statsd, [erlang, random, integer], max, 1000, true }
          , { exometer_report_statsd, [erlang, random, integer], mean, 1000, true }
          , { exometer_report_statsd, [erlang, random, integer], median, 1000, true }

          , { exometer_report_statsd, [publish_proto, publish, latency], max, 1000, true }
          , { exometer_report_statsd, [publish_proto, publish, latency], min, 1000, true }
          , { exometer_report_statsd, [publish_proto, publish, latency], median, 1000, true }
        ]},

      { reporters,
        [
          %% Reporter_ID, matches with subscribers entry above
          { exometer_report_statsd,
            [
              {hostname, "localhost"},
              {port, 8125},
              {type_map, [
                %% { Metric_ID with datapoint as list, statsd metric type }
                { [publish_proto, erlang, memory, total], gauge }
                , { [publish_proto, erlang, memory, processes], gauge }
                , { [publish_proto, erlang, memory, ets], gauge }
                , { [publish_proto, erlang, memory, binary], gauge }
                , { [publish_proto, erlang, memory, atom], gauge }
                , { [publish_proto, erlang, memory, system], gauge }

                , { [publish_proto, recon, alloc, used], gauge }
                , { [publish_proto, recon, alloc, allocated], gauge }
                , { [publish_proto, recon, alloc, unused], gauge }
                , { [publish_proto, recon, alloc, usage], gauge }

                , { [publish_proto, publish, latency, max], gauge }
                , { [erlang, random, integer, max], gauge }
                , { [erlang, random, integer, mean], gauge }
                , { [erlang, random, integer, median], gauge }

                , { [publish_proto, publish, latency, min], gauge }
                , { [publish_proto, publish, latency, median], gauge }
              ]}
            ]}
        ]}
    ]}
 ]}

].
